
#!/bin/sh

##########
#安装 Guest Additions
##########
#:<<install-guest-additions-on-cd-or-dvd-device
# 通过挂载光驱，安装virtualbox增强功能

####### 为什么要
# 安装增强功能后，鼠标可以在虚拟机和主机之间自由切换。
# 安装增强功能后，可以使用主机和虚拟机之间文件夹共享及双向拷贝。
####### 如何进行
###
# 定义内置变量
###
THIS_FILE_PATH=$(
  cd $(dirname $0)
  pwd
)
IS_PM=
IS_VM=
MACHINE=
VM_NAME=centos-7.6
VBOX_GUEST_ADDITIONS_FILE="E:\\Program Files\\Oracle\\VirtualBox\\VBoxGuestAdditions.iso"
###
# 定义内置函数
###
function ouput_debug_msg() {
  local debug_msg=$1
  local debug_swith=$2
  if [[ "$debug_swith" =~ "false" ]]; then
    echo $debug_msg >/dev/null 2>&1
  elif [ -n "$debug_swith" ]; then
    echo $debug_msg
  elif [[ "$debug_swith" =~ "true" ]]; then
    echo $debug_msg
  fi
}
function path_resolve_for_relative() {
  local str1="${1}"
  local str2="${2}"
  local slpit_char1=/
  local slpit_char2=/
  if [[ -n ${3} ]]; then
    slpit_char1=${3}
  fi
  if [[ -n ${4} ]]; then
    slpit_char2=${4}
  fi

  # 路径-转为数组
  local arr1=(${str1//$slpit_char1/ })
  local arr2=(${str2//$slpit_char2/ })

  # 路径-解析拼接
  #2 遍历某一数组
  #2 删除元素取值
  #2 获取数组长度
  #2 获取数组下标
  #2 数组元素赋值
  for val2 in ${arr2[@]}; do
    length=${#arr1[@]}
    if [ $val2 = ".." ]; then
      index=$(($length - 1))
      if [ $index -le 0 ]; then index=0; fi
      unset arr1[$index]
      #echo ${arr1[*]}
      #echo  $index
    else
      index=$length
      arr1[$index]=$val2
      #echo ${arr1[*]}
    fi
  done
  # 路径-转为字符
  local str3=''
  for i in ${arr1[@]}; do
    str3=$str3/$i
  done
  if [ -z $str3 ]; then str3="/"; fi
  echo $str3
}
function path_resolve() {
  local str1="${1}"
  local str2="${2}"
  local slpit_char1=/
  local slpit_char2=/
  if [[ -n ${3} ]]; then
    slpit_char1=${3}
  fi
  if [[ -n ${4} ]]; then
    slpit_char2=${4}
  fi

  #FIX:when passed asboult path,dose not return the asboult path itself
  #str2="/d/"
  local str3=""
  str2=$(echo $str2 | sed "s#/\$##")
  ABSOLUTE_PATH_REG_PATTERN="^/"
  if [[ $str2 =~ $ABSOLUTE_PATH_REG_PATTERN ]]; then
    str3=$str2
  else
    str3=$(path_resolve_for_relative $str1 $str2 $slpit_char1 $slpit_char2)
  fi
  echo $str3
}
function get_help_msg() {
  local USAGE_MSG=$1
  local USAGE_MSG_FILE=$2
  if [ -z $USAGE_MSG ]; then
    if [[ -n $USAGE_MSG_FILE && -e $USAGE_MSG_FILE ]]; then
      USAGE_MSG=$(cat $USAGE_MSG_FILE)
    else
      USAGE_MSG="no help msg and file"
    fi
  fi
  echo "$USAGE_MSG"
}
function read_config_file(){
#echo ${THIS_FILE_PATH}
local CONFIG_FILE=${THIS_FILE_PATH}/${BUILT_IN_CONFIG_FILE_NAME}
if [ -n "${1}" ]
then
    CONFIG_FILE=$1
fi
local test=`sed 's/^ *//g' $CONFIG_FILE | grep --invert-match "^#"`
#字符转为数组
local arr=($test)
local key=
local value=
for i in "${arr[@]}"; do
    # 获取键名
    key=`echo $i|awk -F'=' '{print $1}'`
    # 获取键值
    value=`echo $i|awk -F'=' '{print $2}'`
    # 输出该行
    #printf "%s\t\n" "$i"
    dic+=([$key]=$value)
done
echo "read confifg file:$CONFIG_FILE"
}
# 引入相关文件
PROJECT_PATH=$(path_resolve $THIS_FILE_PATH "../")
HELP_DIR=$(path_resolve $THIS_FILE_PATH "../help")
SRC_DIR=$(path_resolve $THIS_FILE_PATH "../src")
TEST_DIR=$(path_resolve $THIS_FILE_PATH "../test")
DIST_DIR=$(path_resolve $THIS_FILE_PATH "../dist")
DOCS_DIR=$(path_resolve $THIS_FILE_PATH "../docs")
TOOL_DIR=$(path_resolve $THIS_FILE_PATH "../tool")
# 参数帮助信息
USAGE_MSG=
USAGE_MSG_PATH=$(path_resolve $THIS_FILE_PATH "../help")
USAGE_MSG_FILE=${USAGE_MSG_PATH}/install-guest-additions-on-cd-or-dvd-device.txt
USAGE_MSG=$(get_help_msg "$USAGE_MSG" "$USAGE_MSG_FILE")
###
#参数规则内容
###
GETOPT_ARGS_SHORT_RULE="--options h,d,m:"
GETOPT_ARGS_LONG_RULE="--long help,debug,machine:,vm-name:,virtual:,where:,iso-file:,guest:,iso:,name:,file:,additions:,on:,this:,shell:,runing:,the:,options,set:"
###
#设置参数规则
###
GETOPT_ARGS=$(
  getopt $GETOPT_ARGS_SHORT_RULE \
  $GETOPT_ARGS_LONG_RULE -- "$@"
)
###
#解析参数规则
###
eval set -- "$GETOPT_ARGS"
# below generated by write-sources.sh
while [ -n "$1" ]
do
    case $1 in
    --machine)
    MACHINE=$2
    shift 2
    ;;
    --vm-name)
    ARG_VM_NAME=$2
    shift 2
    ;;
    --virtual)
    VIRTUAL=$2
    shift 2
    ;;
    --where)
    WHERE=$2
    shift 2
    ;;
    --iso-file)
    ARG_ISO_FILE=$2
    shift 2
    ;;
    --guest)
    GUEST=$2
    shift 2
    ;;
    --iso)
    ISO=$2
    shift 2
    ;;
    --name)
    NAME=$2
    shift 2
    ;;
    --file)
    FILE=$2
    shift 2
    ;;
    --additions)
    ADDITIONS=$2
    shift 2
    ;;
    --on)
    ON=$2
    shift 2
    ;;
    --this)
    THIS=$2
    shift 2
    ;;
    --shell)
    SHELL=$2
    shift 2
    ;;
    --runing)
    RUNING=$2
    shift 2
    ;;
    --the)
    THE=$2
    shift 2
    ;;
    --options,set)
    OPTIONS,SET=$2
    shift 2
    ;;
    -h|--help)
    echo "$USAGE_MSG"
    exit 1
    ;;
    -d|--debug)
    IS_DEBUG_MODE=true
    shift 2
    ;;
    --)
    break
    ;;
    *)
    printf "$USAGE_MSG"
    ;;
    esac
done
###
#处理剩余参数
###
# optional
###
#更新内置变量
###
# below generated by write-sources.sh

if [ -n "$MACHINE" ]
then
    MACHINE=$MACHINE
fi
if [ -n "$ARG_VM_NAME" ]
then
    VM_NAME=$ARG_VM_NAME
fi
if [ -n "$VIRTUAL" ]
then
    VIRTUAL=$VIRTUAL
fi
if [ -n "$WHERE" ]
then
    WHERE=$WHERE
fi
if [ -n "$ARG_ISO_FILE" ]
then
    ISO_FILE=$ARG_ISO_FILE
fi
if [ -n "$GUEST" ]
then
    GUEST=$GUEST
fi
if [ -n "$ISO" ]
then
    ISO=$ISO
fi
if [ -n "$NAME" ]
then
    NAME=$NAME
fi
if [ -n "$FILE" ]
then
    FILE=$FILE
fi
if [ -n "$ADDITIONS" ]
then
    ADDITIONS=$ADDITIONS
fi
if [ -n "$ON" ]
then
    ON=$ON
fi
if [ -n "$THIS" ]
then
    THIS=$THIS
fi
if [ -n "$SHELL" ]
then
    SHELL=$SHELL
fi
if [ -n "$RUNING" ]
then
    RUNING=$RUNING
fi
if [ -n "$THE" ]
then
    THE=$THE
fi
if [ -n "$OPTIONS,SET" ]
then
    OPTIONS,SET=$OPTIONS,SET
fi
###
#脚本主要代码
###
if [ -n "$ARG_VM_NAME" ]; then
  VM_NAME=$ARG_VM_NAME
fi

VBOX_GUEST_ADDITIONS_FILE="E:\\Program Files\\Oracle\\VirtualBox\\VBoxGuestAdditions.iso"
if [ -n "$ARG_ISO_FILE" ]; then
  VBOX_GUEST_ADDITIONS_FILE=$ARG_ISO_FILE
fi

#echo $VM_NAME,$VBOX_GUEST_ADDITIONS_FILE

function run_on_pm() {
  #VM_NAME=centos-7.6
  # 设置存储
  #2 建存储控制器
  #VBoxManage storagectl $VM_NAME --name $STORAGE_CONTROLLER_IDE_NAME --add ide --controller $STORAGE_CONTROLLER_IDE_TYPE --bootable on
  #2 删除储控制器
  #VBoxManage storagectl $VM_NAME --name $STORAGE_CONTROLLER_IDE_NAME --remove
  # 关联镜像（插入光盘）
  IDE_DEVICE=0          #存储控制器ide设备编号
  IDE_PORT=0            #存储控制器ide设备端口
  STROAGE_TYPE=dvddrive #存储驱动类型
  #VBoxManage storageattach $VM_NAME --storagectl $STORAGE_CONTROLLER_IDE_NAME --device $IDE_DEVICE --port $IDE_PORT  --type $STROAGE_TYPE --medium "E:\\Program Files\\Oracle\\VirtualBox\\VBoxGuestAdditions.iso"
  VBoxManage storageattach $VM_NAME --storagectl $STORAGE_CONTROLLER_IDE_NAME --device $IDE_DEVICE --port $IDE_PORT --type $STROAGE_TYPE --medium "$VBOX_GUEST_ADDITIONS_FILE"
}
####function-usage
# run_on_pm

function run_on_vm() {
  # 挂载镜像（挂载光驱）
  #挂载到的目录
  VM_MOUT_ISO_DIR=/mnt/VBoxGuestAdditions
  mkdir -p $VM_MOUT_ISO_DIR
  #光驱所在目录
  VM_ROM_NAME=$(ls /dev | grep "cdrom\dvdrom")
  VM_ROM_DIR=/dev${VM_ROM_NAME}
  #挂载
  sudo mount -t auto $VM_MOUT_ISO_DIR $VM_ROM_DIR #cat /dev
  #安装
  cd $VM_MOUT_ISO_DIR
  sudo ./VBoxLinuxAdditions.run
  # 卸载镜像
  sudo umount $VM_MOUT_ISO_DIR
  # 删除目录
  rm -rf $VM_MOUT_ISO_DIR
  # 重启电脑
  sudo reboot
}
####function-usage
# run_on_vm

function installs() {
  local MACHINE_ON=$1
  if [ $MACHINE_ON = "pm" ]; then
    # on pm git-bash:
    run_on_pm
  elif [ $MACHINE_ON = "vm" ]; then
    # on vm bash:
    run_on_vm
  fi
}
####function-usage
# installs pm
# installs vm

function ouput_debug_msg() {
  local debug_msg=$1
  local debug_swith=$2
  if [[ "$debug_swith" =~ "false" ]]; then
    echo $debug_msg >/dev/null 2>&1
  elif [ -n "$debug_swith" ]; then
    echo $debug_msg
  elif [[ "$debug_swith" =~ "true" ]]; then
    echo $debug_msg
    #echo $debug_msg > /dev/null 2>&1
  fi
}
####function-usage
# ouput_debug_msg "pm" "false"
# ouput_debug_msg "pm"

if [[ "$MACHINE" =~ "pm" ]]; then
  ouput_debug_msg "with --machine pm is run on:pm" $IS_DEBUG_MODE
  #installs "pm"
elif [[ "$MACHINE" =~ "vm" ]]; then
  ouput_debug_msg "with --machine vm is run on:vm" $IS_DEBUG_MODE
  #installs "vm"
else
  ouput_debug_msg "default is run on: pm" $IS_DEBUG_MODE
  #installs "pm"
fi

#安装VBoxGuestAdditions
: <<install-VBoxGuestAdditions-on-centos
wget http://download.virtualbox.org/virtualbox/4.3.8/VBoxGuestAdditions_4.3.8.iso
sudo mkdir /media/VBoxGuestAdditions
sudo mount -o loop,ro VBoxGuestAdditions_4.3.8.iso /media/VBoxGuestAdditions
sudo sh /media/VBoxGuestAdditions/VBoxLinuxAdditions.run
rm VBoxGuestAdditions_4.3.8.iso
sudo umount /media/VBoxGuestAdditions
sudo rmdir /media/VBoxGuestAdditions
install-VBoxGuestAdditions-on-centos
